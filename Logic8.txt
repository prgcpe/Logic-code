19 February 2018
FINAL

1. find peak
#include <stdio.h>
void findPeak(int[], int);
int main(){
	int n[] = {3, 9, 1, 5, 12, 25, 10};
	int length = sizeof(n)/sizeof(n[0]);
	
	findPeak(n, length);
	return 0;
}
void findPeak(int a[], int len){
	int i;
	for(i = 1; i < len - 1; i++){
		if(a[i-1] < a[i] && a[i] > a[i+1])
			printf("%d ", a[i]);
	}
}
*******************************************************************
2. bubble sort
#include <stdio.h>
void printArray(int[], int);
void bubbleSort(int[], int);
int main(){
	int n[] = {3, 9, 1, 5, 12, 25, 10};
	int length = sizeof(n)/sizeof(n[0]);
	
	printArray(n, length);
	bubbleSort(n, length);
	printArray(n, length);
	return 0;
}
void bubbleSort(int a[], int len){
	int i, pass, temp, swapped;
	for(pass = 1; pass < len; pass++){
		swapped = 0;
		for(i = 0; i < len - pass; i++){
			if(a[i] > a[i+1]){
				temp = a[i];
				a[i] = a[i+1];
				a[i+1] = temp;
				swapped = 1;
			}
		}
		if(!swapped)
			return;
	}
}
void printArray(int a[], int len){
	int i;
	for(i = 0; i < len; i++)
		printf("%d ", a[i]);
	printf("\n");
}
*******************************************************************
3. selecttion sort
#include <stdio.h>
void printArray(int[], int);
void selectionSort(int[], int);
int main(){
	int n[] = {3, 9, 1, 5, 12, 25, 10};
	int length = sizeof(n)/sizeof(n[0]);
	
	printArray(n, length);
	selectionSort(n, length);
	printArray(n, length);
	return 0;
}
void selectionSort(int a[], int len){
	int i, j, ind, temp;
	for(i = 0; i < len; i++){
		ind = i;
		for(j = i+1; j < len; j++){
			if(a[j] <a[ind]){
				temp = a[j];
				a[j] = a[ind];
				a[ind] = temp;
			}
		}
	}
}
void printArray(int a[], int len){
	int i;
	for(i = 0; i < len; i++)
		printf("%d ", a[i]);
	printf("\n");
}
*******************************************************************
4. insertion sort
#include <stdio.h>
void printArray(int[], int);
void insertionSort(int[], int);
int main(){
	int n[] = {3, 9, 1, 5, 12, 25, 10};
	int length = sizeof(n)/sizeof(n[0]);
	
	printArray(n, length);
	insertionSort(n, length);
	printArray(n, length);
	return 0;
}
void insertionSort(int a[], int len){
	int i, j, key;
	for(i = 1; i < len; i++){
		key = a[i];
		j = i-1;
		while(j >= 0 && a[j] > key){
			a[j+1] = a[j];
			j--;
		}
		a[j+1] = key;
	}
}
void printArray(int a[], int len){
	int i;
	for(i = 0; i < len; i++)
		printf("%d ", a[i]);
	printf("\n");
}
*******************************************************************
5. linear search
#include <stdio.h>
void printArray(int[], int);
int linearSearch(int[], int, int);
int main(){
	int n[] = {3, 9, 1, 5, 12, 25, 10};
	int length = sizeof(n)/sizeof(n[0]);
	int key, ind;
	
	printArray(n, length);
	printf("Enter value of key : ");
	scanf("%d", &key);
	ind = linearSearch(n, length, key);
	if(ind == -1)
		printf("cannot find\n");
	else
		printf("find %d at index %d\n", key, ind);
		
	return 0;
}
int linearSearch(int a[], int len, int k){
	int i;
	for(i = 0; i < len; i++){
		if(a[i] == k)
			return i;
	}
	return -1;
}
void printArray(int a[], int len){
	int i;
	for(i = 0; i < len; i++)
		printf("%d ", a[i]);
	printf("\n");
}
*******************************************************************
6. binary search
#include <stdio.h>
void printArray(int[], int);
int binarySearch(int[], int, int);
void insertionSort(int[], int);
int main(){
	int n[] = {3, 9, 1, 5, 12, 25, 10};
	int length = sizeof(n)/sizeof(n[0]);
	int key, ind;
	
	printArray(n, length);
	insertionSort(n, length);
	printf("Enter value of key : ");
	scanf("%d", &key);
	ind = binarySearch(n, length, key);
	if(ind == -1)
		printf("cannot find\n");
	else
		printf("find %d at index %d\n", key, ind);
		
	return 0;
}
int binarySearch(int a[], int len, int k){
	int left, right, mid;
	left = 0;
	right = len - 1;
	
	while(left <= right){
		mid = (left+right)/2;
		if(a[mid] == k)
			return mid;
		else if(a[mid] < k)
			left = mid + 1;
		else
			right = mid - 1;
		
	}
	return -1;
}
void printArray(int a[], int len){
	int i;
	for(i = 0; i < len; i++)
		printf("%d ", a[i]);
	printf("\n");
}
void insertionSort(int a[], int len){
	int i, j, key;
	for(i = 1; i < len; i++){
		key = a[i];
		j = i-1;
		while(j >= 0 && a[j] > key){
			a[j+1] = a[j];
			j--;
		}
		a[j+1] = key;
	}
}

*******************************************************************
7. merge
#include <stdio.h>
void printArray(int[], int);
void merge(int[], int, int[], int, int[]);
int main(){
	int a[] = {3, 9, 15, 20, 30};
	int b[] = {1, 4, 8, 18, 25 ,100};
	int lenA = sizeof(a)/sizeof(a[0]);
	int lenB = sizeof(b)/sizeof(b[0]);
	int c[lenA+lenB];
	printArray(a, lenA);
	printArray(b, lenB);
	merge(a, lenA, b, lenB, c);
	printArray(c, lenA+lenB);
	return 0;
}
void merge(int x[], int lenX, int y[], int lenY, int z[]){
	int i, j, k;
	i = j = k = 0;
	while(i < lenX && j < lenY){
		if(x[i] < y[j])
			z[k++] = x[i++];
		else
			z[k++] = y[j++];
	}
	while(i < lenX)
		z[k++] = x[i++];
	while(j < lenY)
		z[k++] = y[j++];
}
*******************************************************************
int A[] = {1, 3, 5, 6}
int B[] = {3, 6, 9}
print A U B

Running
1 3 5 6 9   
    
#include <stdio.h>
void printArray(int[], int);
void uNion(int[], int, int[], int, int[]);
int main(){
	int a[] = {1, 3, 5, 6};
	int b[] = {3, 6, 9};
	int lenA = sizeof(a)/sizeof(a[0]);
	int lenB = sizeof(b)/sizeof(b[0]);
	int c[lenA+lenB];
	
	printArray(a, lenA);
	printArray(b, lenB);
	uNion(a, lenA, b, lenB, c);
	
	return 0;
}
void printArray(int a[], int len){
	int i;
	for(i = 0; i < len; i++)
		printf("%d ", a[i]);
	printf("\n");
}
void uNion(int x[], int lenX, int y[], int lenY, int z[]){
	int i, j;
	i = j = 0;
	while(i < lenX && j < lenY){
		if(x[i] == y[j]){
			printf("%d ", x[i]);
			i++;
			j++;
		}		
		else if(x[i] < y[j])
			printf("%d ", x[i++]);
		else
			printf("%d ", y[j++]);
	}
	while(i < lenX)
		printf("%d ", x[i++]);
	while(j < lenY)
		printf("%d ", y[j++]);
}
*******************************************************************
   
